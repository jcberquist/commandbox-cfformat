component {

    /**
     * <pre>
     * Try's to get a jwt token from the authorization header or the custom header
     * defined in the configuration or passed in by you.
     *
     * if (true) {
     *   doSomething();
     * }
     * </pre>
     *
     * @token                    The token to parse and validate, if not passed we call the discoverToken() method for you.
     * @storeInContext           By default, the token will be stored in the request context
     * @authenticate             By default, the token will be authenticated, you can disable it and do manual authentication.
     * @x-param                  Metadata param
     * @mxunit:expectedException InvalidException
     *
     * @return The payload for convenience
     *
     * @throws TokenExpiredException  If the token has expired or no longer in the storage (invalidated)
     * @throws TokenInvalidException  If the token doesn't verify decoding
     * @throws TokenNotFoundException If the token cannot be found in the headers
     */
    struct function parseToken(
        string token = discoverToken(),
        boolean storeInContext = true,
        boolean authenticate = true
    ) {
    }

}
