{
    "array.empty_padding": {
        "description": "When true, empty arrays are padded with a space.",
        "example": {
            "code": "myArray = [];"
        },
        "type": "boolean"
    },
    "array.multiline.element_count": {
        "description": "When an array has this number of elements or more, print it onto multiple lines.",
        "type": "integer"
    },
    "array.multiline.leading_comma": {
        "description": "Whether to use a leading comma when an array is printed on multiple lines.",
        "example": {
            "code": "myArray = [1,2,3,4];",
            "settings": {
                "array.multiline.min_length": 1,
                "array.multiline.leading_comma.padding": false
            }
        },
        "type": "boolean"
    },
    "array.multiline.leading_comma.padding": {
        "description": "Whether to insert a space after leading commas when an array is printed on multiple lines.",
        "example": {
            "code": "myArray = [1,2,3,4];",
            "settings": {
                "array.multiline.leading_comma": true,
                "array.multiline.min_length": 1
            }
        },
        "type": "boolean"
    },
    "array.multiline.leading_comma.tab": {
        "description": "Whether to insert a tab instead of a space after leading commas when an array is printed on multiple lines.",
        "example": {
            "code": "myArray = [1,2,3,4];",
            "settings": {
                "array.multiline.leading_comma": true,
                "array.multiline.leading_comma.padding": true,
                "array.multiline.min_length": 1
            }
		},
		"type": "boolean"
    },
    "array.multiline.min_length": {
        "description": "No matter how many elements an array has, if it is shorter than this length, keep it on one line.",
        "type": "integer"
    },
    "array.padding": {
        "description": "When true, non-empty arrays are padded with spaces.",
        "example": {
            "code": "myArray = [1,2];"
        },
        "type": "boolean"
    },
    "binary_operators.padding": {
        "description": "Whether to pad binary operators with spaces.",
        "example": {
            "code": "a=1+2;"
        },
        "type": "boolean"
    },
    "assignment_operators.compact": {
        "description": "Whether to pad assignment operators with a space on the left.",
        "example": {
            "code": "a= 1+2;"
        },
        "type": "boolean"
    },
    "brackets.padding": {
        "description": "When true, bracketed accessors are padded with spaces.",
        "example": {
            "code": "a['mykey'][1]=7;"
        },
        "type": "boolean"
    },
    "for_loop_semicolons.padding": {
        "description": "When true, insert a space after for loop semicolons.",
        "example": {
            "code": "for(var i=0;i<10;i++){}"
        },
        "type": "boolean"
    },
    "function_call.empty_padding": {
        "description": "When true, function calls with no arguments are padded with a space.",
        "example": {
            "code": "myFunc();"
        },
        "type": "boolean"
    },
    "function_call.multiline.element_count": {
        "description": "When a function call has this number of arguments, split them onto multiple lines.",
        "type": "integer"
    },
    "function_call.multiline.leading_comma": {
        "description": "Whether to use a leading comma when function call arguments are printed on multiple lines.",
        "example": {
            "code": "myFunc(1,2,3,4);",
            "settings": {
                "function_call.multiline.min_length": 1,
                "function_call.multiline.leading_comma.padding": false
            }
        },
        "type": "boolean"
    },
    "function_call.multiline.leading_comma.padding": {
        "description": "Whether to insert a space after leading commas when function call arguments are printed on multiple lines.",
        "example": {
            "code": "myFunc(1,2,3,4);",
            "settings": {
                "function_call.multiline.leading_comma": true,
                "function_call.multiline.min_length": 1
            }
        },
        "type": "boolean"
    },
    "function_call.multiline.leading_comma.tab": {
        "description": "Whether to insert a tab instead of a space after leading commas when function call arguments are printed on multiple lines.",
        "example": {
            "code": "myFunc(1,2,3,4);",
            "settings": {
                "function_call.multiline.leading_comma": true,
                "function_call.multiline.leading_comma.padding": true,
                "function_call.multiline.min_length": 1
            }
		},
		"type": "boolean"
    },
    "function_call.multiline.min_length": {
        "description": "No matter how many arguments a function call has, if they can be printed inline in this many columns or less, keep them on one line.",
        "type": "integer"
    },
    "function_call.padding": {
        "description": "Whether to pad function call arguments with spaces.",
        "example": {
            "code": "myFunc(1,2);"
        },
        "type": "boolean"
    },
    "function_declaration.empty_padding": {
        "description": "When true, pad function declarations that have no parameters with a space.",
        "example": {
            "code": "function() {}"
        },
        "type": "boolean"
    },
    "function_declaration.group_to_block_spacing": {
        "description": "How to space from the function parameters to the function block.",
        "example": {
            "code": "function() {}"
        },
        "type": "string",
        "values": ["spaced", "compact", "newline"]
    },
    "function_declaration.multiline.element_count": {
        "description": "When a function declaration has this number of parameters, split them onto multiple lines.",
        "type": "integer"
    },
    "function_declaration.multiline.leading_comma": {
        "description": "Whether to use a leading comma when function declaration parameters are printed on multiple lines.",
        "example": {
            "code": "function(a,b,c,d) {}",
            "settings": {
                "function_declaration.multiline.min_length": 1,
                "function_declaration.multiline.leading_comma.padding": false
            }
        },
        "type": "boolean"
    },
    "function_declaration.multiline.leading_comma.padding": {
        "description": "Whether to insert a space after leading commas when function declaration parameters are printed on multiple lines.",
        "example": {
            "code": "function(a,b,c,d) {}",
            "settings": {
                "function_declaration.multiline.leading_comma": true,
                "function_declaration.multiline.min_length": 1
            }
        },
        "type": "boolean"
    },
    "function_declaration.multiline.leading_comma.tab": {
        "description": "Whether to insert a tab instead of a space after leading commas when function declaration parameters are printed on multiple lines.",
		"example": {
            "code": "function(a,b,c,d) {}",
            "settings": {
                "function_declaration.multiline.leading_comma": true,
                "function_declaration.multiline.leading_comma.padding": true,
                "function_declaration.multiline.min_length": 1
            }
		},
		"type": "boolean"
    },
    "function_declaration.multiline.min_length": {
        "description": "No matter how many parameters a function declaration has, if they can be printed in this many columns or less, keep them on one line.",
        "type": "integer"
    },
    "function_declaration.padding": {
        "description": "Whether to pad non-empty function calls with spaces.",
        "example": {
            "code": "function(a,b) {}"
        },
        "type": "boolean"
    },
    "indent_size": {
        "description": "Each indent level or tab is equivalent to this many spaces.",
        "example": {
            "code": "do {myFunc();}",
            "values": [4, 2]
        },
        "type": "integer"
    },
    "keywords.block_to_keyword_spacing": {
        "description": "Spacing for keywords following a block.",
        "example": {
            "code": "if(true){}else{}"
        },
        "type": "string",
        "values": ["spaced", "compact", "newline"]
    },
    "keywords.empty_group_spacing": {
        "description": "Whether to pad empty keyword groups.",
        "example": {
            "code": "if(){}"
        },
        "type": "boolean"
    },
    "keywords.group_to_block_spacing": {
        "description": "Spacing from a keyword group to the following block.",
        "example": {
            "code": "if(true){}"
        },
        "type": "string",
        "values": ["spaced", "compact", "newline"]
    },
    "keywords.padding_inside_group": {
        "description": "Whether to pad inside non-empty keyword groups.",
        "example": {
            "code": "if(true){}"
        },
        "type": "boolean"
    },
    "keywords.spacing_to_block": {
        "description": "Spacing from a keyword to the following block.",
        "example": {
            "code": "do{}"
        },
        "type": "string",
        "values": ["spaced", "compact", "newline"]
    },
    "keywords.spacing_to_group": {
        "description": "Whether to space a keyword from following group.",
        "example": {
            "code": "if(true){}"
        },
        "type": "boolean"
    },
    "max_columns": {
        "description": "When rendering a delimited item (struct, array, function call, function declaration parameters), this is the maximum number of columns to render on one line before splitting the elements onto multiple lines.",
        "type": "integer"
    },
    "parentheses.padding": {
        "description": "Whether to pad the contents of a group.",
        "example": {
            "code": "a=(1+2);"
        },
        "type": "boolean"
    },
    "strings.attributes.quote": {
        "description": "Whether to use a single or double quote for attribute values. If set to an empty string, leaves attribute value quotes as they are found.",
        "example": {
            "code": "http url='www.google.com';\nparam name=\"key\";"
        },
        "type": "string",
        "values": ["single", "double", ""]
    },
    "strings.quote": {
        "description": "Whether to use a single or double quote for strings. If set to an empty string, leaves string quotes as they are found.",
        "example": {
            "code": "a=\"One\";\nb='Two';"
        },
        "type": "string",
        "values": ["single", "double", ""]
    },
    "struct.empty_padding": {
        "description": "When true, non-empty structs are padded with spaces.",
        "example": {
            "code": "myStruct={};"
        },
        "type": "boolean"
    },
    "struct.multiline.element_count": {
        "description": "When a struct has this number of elements or more, print it onto multiple lines.",
        "type": "integer"
    },
    "struct.multiline.leading_comma": {
        "description": "Whether to use a leading comma when an struct is printed on multiple lines.",
        "example": {
            "code": "myStruct={a:1,b:2,c:3,d:4};",
            "settings": {
                "struct.multiline.min_length": 1,
                "struct.multiline.leading_comma.padding": false
            }
        },
        "type": "boolean"
    },
    "struct.multiline.leading_comma.padding": {
        "description": "Whether to insert a space after leading commas when an struct is printed on multiple lines.",
        "example": {
            "code": "myStruct={a:1,b:2,c:3,d:4};",
            "settings": {
                "struct.multiline.leading_comma": true,
                "struct.multiline.min_length": 1
            }
        },
        "type": "boolean"
    },
    "struct.multiline.leading_comma.tab": {
        "description": "Whether to insert a tab instead of a space after leading commas when an struct is printed on multiple lines.",
        "example": {
            "code": "myStruct={a:1,b:2,c:3,d:4};",
            "settings": {
                "struct.multiline.leading_comma": true,
                "struct.multiline.leading_comma.padding": true,
                "struct.multiline.min_length": 1
            }
		},
		"type": "boolean"
    },
    "struct.multiline.min_length": {
        "description": "No matter how many elements an struct has, if it is shorter than this length, keep it on one line.",
        "type": "integer"
    },
    "struct.padding": {
        "description": "Whether to pad non-empty structs with spaces.",
        "example": {
            "code": "myStruct={a:1,b:2};"
        },
        "type": "boolean"
    },
    "struct.separator": {
        "description": "The key value separator to use in structs - it must contain either a single `:` or `=` and be no more than 3 characters in length.",
        "example": {
            "code": "myStruct={a:1,b:2};",
            "values": [": ", " = ", " : ", "="]
        },
        "type": "struct-key-value"
    },
    "tab_indent": {
        "description": "Whether to indent using tab characters or not.",
        "type": "boolean"
    }
}
