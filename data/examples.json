{
    "array.empty_padding":"// array.empty_padding: true\nmyArray = [ ];\n\n// array.empty_padding: false\nmyArray = [];",
    "array.multiline.leading_comma":"// array.multiline.leading_comma: true\nmyArray = [\n     1\n    ,2\n    ,3\n    ,4\n];\n\n// array.multiline.leading_comma: false\nmyArray = [\n    1,\n    2,\n    3,\n    4\n];",
    "array.multiline.leading_comma.padding":"// array.multiline.leading_comma.padding: true\nmyArray = [\n      1\n    , 2\n    , 3\n    , 4\n];\n\n// array.multiline.leading_comma.padding: false\nmyArray = [\n     1\n    ,2\n    ,3\n    ,4\n];",
    "array.multiline.leading_comma.tab":"// array.multiline.leading_comma.tab: true\nmyArray = [\n    1\n,   2\n,   3\n,   4\n];\n\n// array.multiline.leading_comma.tab: false\nmyArray = [\n      1\n    , 2\n    , 3\n    , 4\n];",
    "array.padding":"// array.padding: true\nmyArray = [ 1, 2 ];\n\n// array.padding: false\nmyArray = [1, 2];",
    "assignment_operators.compact":"// assignment_operators.compact: true\na= 1 + 2;\n\n// assignment_operators.compact: false\na = 1 + 2;",
    "binary_operators.padding":"// binary_operators.padding: true\na = 1 + 2;\n\n// binary_operators.padding: false\na=1+2;",
    "brackets.padding":"// brackets.padding: true\na[ 'mykey' ][ 1 ] = 7;\n\n// brackets.padding: false\na['mykey'][1] = 7;",
    "for_loop_semicolons.padding":"// for_loop_semicolons.padding: true\nfor (var i = 0; i < 10; i++) {\n}\n\n// for_loop_semicolons.padding: false\nfor (var i = 0;i < 10;i++) {\n}",
    "function_call.empty_padding":"// function_call.empty_padding: true\nmyFunc( );\n\n// function_call.empty_padding: false\nmyFunc();",
    "function_call.multiline.leading_comma":"// function_call.multiline.leading_comma: true\nmyFunc(\n     1\n    ,2\n    ,3\n    ,4\n);\n\n// function_call.multiline.leading_comma: false\nmyFunc(\n    1,\n    2,\n    3,\n    4\n);",
    "function_call.multiline.leading_comma.padding":"// function_call.multiline.leading_comma.padding: true\nmyFunc(\n      1\n    , 2\n    , 3\n    , 4\n);\n\n// function_call.multiline.leading_comma.padding: false\nmyFunc(\n     1\n    ,2\n    ,3\n    ,4\n);",
    "function_call.multiline.leading_comma.tab":"// function_call.multiline.leading_comma.tab: true\nmyFunc(\n    1\n,   2\n,   3\n,   4\n);\n\n// function_call.multiline.leading_comma.tab: false\nmyFunc(\n      1\n    , 2\n    , 3\n    , 4\n);",
    "function_call.padding":"// function_call.padding: true\nmyFunc( 1, 2 );\n\n// function_call.padding: false\nmyFunc(1, 2);",
    "function_declaration.empty_padding":"// function_declaration.empty_padding: true\nfunction( ) {\n}\n\n// function_declaration.empty_padding: false\nfunction() {\n}",
    "function_declaration.group_to_block_spacing":"// function_declaration.group_to_block_spacing: \"spaced\"\nfunction() {\n}\n\n// function_declaration.group_to_block_spacing: \"compact\"\nfunction(){\n}\n\n// function_declaration.group_to_block_spacing: \"newline\"\nfunction()\n{\n}",
    "function_declaration.multiline.leading_comma":"// function_declaration.multiline.leading_comma: true\nfunction(\n     a\n    ,b\n    ,c\n    ,d\n) {\n}\n\n// function_declaration.multiline.leading_comma: false\nfunction(\n    a,\n    b,\n    c,\n    d\n) {\n}",
    "function_declaration.multiline.leading_comma.padding":"// function_declaration.multiline.leading_comma.padding: true\nfunction(\n      a\n    , b\n    , c\n    , d\n) {\n}\n\n// function_declaration.multiline.leading_comma.padding: false\nfunction(\n     a\n    ,b\n    ,c\n    ,d\n) {\n}",
    "function_declaration.multiline.leading_comma.tab":"// function_declaration.multiline.leading_comma.tab: true\nfunction(\n    a\n,   b\n,   c\n,   d\n) {\n}\n\n// function_declaration.multiline.leading_comma.tab: false\nfunction(\n      a\n    , b\n    , c\n    , d\n) {\n}",
    "function_declaration.padding":"// function_declaration.padding: true\nfunction( a, b ) {\n}\n\n// function_declaration.padding: false\nfunction(a, b) {\n}",
    "indent_size":"// indent_size: 4\ndo {\n    myFunc();\n}\n\n// indent_size: 2\ndo {\n  myFunc();\n}",
    "keywords.block_to_keyword_spacing":"// keywords.block_to_keyword_spacing: \"spaced\"\nif (true) {\n} else {\n}\n\n// keywords.block_to_keyword_spacing: \"compact\"\nif (true) {\n}else {\n}\n\n// keywords.block_to_keyword_spacing: \"newline\"\nif (true) {\n}\nelse {\n}",
    "keywords.empty_group_spacing":"// keywords.empty_group_spacing: true\nif ( ) {\n}\n\n// keywords.empty_group_spacing: false\nif () {\n}",
    "keywords.group_to_block_spacing":"// keywords.group_to_block_spacing: \"spaced\"\nif (true) {\n}\n\n// keywords.group_to_block_spacing: \"compact\"\nif (true){\n}\n\n// keywords.group_to_block_spacing: \"newline\"\nif (true)\n{\n}",
    "keywords.padding_inside_group":"// keywords.padding_inside_group: true\nif ( true ) {\n}\n\n// keywords.padding_inside_group: false\nif (true) {\n}",
    "keywords.spacing_to_block":"// keywords.spacing_to_block: \"spaced\"\ndo {\n}\n\n// keywords.spacing_to_block: \"compact\"\ndo{\n}\n\n// keywords.spacing_to_block: \"newline\"\ndo\n{\n}",
    "keywords.spacing_to_group":"// keywords.spacing_to_group: true\nif (true) {\n}\n\n// keywords.spacing_to_group: false\nif(true) {\n}",
    "parentheses.padding":"// parentheses.padding: true\na = ( 1 + 2 );\n\n// parentheses.padding: false\na = (1 + 2);",
    "strings.attributes.quote":"// strings.attributes.quote: \"single\"\nhttp url='www.google.com';\nparam name='key';\n\n// strings.attributes.quote: \"double\"\nhttp url=\"www.google.com\";\nparam name=\"key\";\n\n// strings.attributes.quote: \"\"\nhttp url='www.google.com';\nparam name=\"key\";",
    "strings.quote":"// strings.quote: \"single\"\na = 'One';\nb = 'Two';\n\n// strings.quote: \"double\"\na = \"One\";\nb = \"Two\";\n\n// strings.quote: \"\"\na = \"One\";\nb = 'Two';",
    "struct.empty_padding":"// struct.empty_padding: true\nmyStruct = { };\n\n// struct.empty_padding: false\nmyStruct = {};",
    "struct.multiline.leading_comma":"// struct.multiline.leading_comma: true\nmyStruct = {\n     a: 1\n    ,b: 2\n    ,c: 3\n    ,d: 4\n};\n\n// struct.multiline.leading_comma: false\nmyStruct = {\n    a: 1,\n    b: 2,\n    c: 3,\n    d: 4\n};",
    "struct.multiline.leading_comma.padding":"// struct.multiline.leading_comma.padding: true\nmyStruct = {\n      a: 1\n    , b: 2\n    , c: 3\n    , d: 4\n};\n\n// struct.multiline.leading_comma.padding: false\nmyStruct = {\n     a: 1\n    ,b: 2\n    ,c: 3\n    ,d: 4\n};",
    "struct.multiline.leading_comma.tab":"// struct.multiline.leading_comma.tab: true\nmyStruct = {\n    a: 1\n,   b: 2\n,   c: 3\n,   d: 4\n};\n\n// struct.multiline.leading_comma.tab: false\nmyStruct = {\n      a: 1\n    , b: 2\n    , c: 3\n    , d: 4\n};",
    "struct.padding":"// struct.padding: true\nmyStruct = { a: 1, b: 2 };\n\n// struct.padding: false\nmyStruct = {a: 1, b: 2};",
    "struct.separator":"// struct.separator: \": \"\nmyStruct = {a: 1, b: 2};\n\n// struct.separator: \" = \"\nmyStruct = {a = 1, b = 2};\n\n// struct.separator: \" : \"\nmyStruct = {a : 1, b : 2};\n\n// struct.separator: \"=\"\nmyStruct = {a=1, b=2};"
}